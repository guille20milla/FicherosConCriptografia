/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Cliente;

import Criptografia.Clave;
import Criptografia.RSA;
import Criptografia.Dividir;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.math.BigInteger;
import java.net.Socket;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Guillermo Veintemilla Clase Cliente que es la interfaz del cliente
 * que se conecta al servidor
 */
public class Cliente extends javax.swing.JFrame {

    static final String host = "127.0.0.1";
    static final int puerto = 4332;
    public static final String repositorioCliente = "Repositorio\\Cliente\\";
    public static final String repositorioServidor = "Repositorio\\Servidor\\";

    Clave clavePrivada, clavePublicaServidor;

    Socket cliente;
    ObjectOutputStream output;
    ObjectInputStream input;

    /**
     * Creates new form Cliente
     */
    public Cliente() {
        try {
            cliente = new Socket(host, puerto);
            initComponents();
            jTextField1.setText(host);
            jTextField2.setText(String.valueOf(puerto));
            setLocationRelativeTo(null);
            setVisible(true);
            cargarClaves();
            output = new ObjectOutputStream(cliente.getOutputStream());
            input = new ObjectInputStream(cliente.getInputStream());
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarClaves() {

        RSA rsa = new RSA();
        clavePrivada = rsa.clavePrivada();
        Clave clavePublicaCliente = rsa.clavePublica();
        try {

            BufferedReader in = new BufferedReader(new InputStreamReader(cliente.getInputStream()));
            BigInteger x = new BigInteger(in.readLine());
            BigInteger n = new BigInteger(in.readLine());
            clavePublicaServidor = new Clave(x, n);

            PrintStream os = new PrintStream(cliente.getOutputStream());
            os.println(clavePublicaCliente.x);
            os.println(clavePublicaCliente.n);
            os.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        arbolServidor = new javax.swing.JTree();
        lblConexion = new javax.swing.JLabel();
        botonDescargar = new javax.swing.JButton();
        botonSubir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        arbolCliente = new javax.swing.JTree();
        lblServidor = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        lblPuerto = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        botonListServidor = new javax.swing.JButton();
        botonListCliente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cliente-Servidor");
        setResizable(false);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        arbolServidor.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(arbolServidor);

        lblConexion.setToolTipText("");

        botonDescargar.setText("Descargar---->");
        botonDescargar.setToolTipText("");
        botonDescargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDescargarActionPerformed(evt);
            }
        });

        botonSubir.setText("<---Subir");
        botonSubir.setToolTipText("");
        botonSubir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSubirActionPerformed(evt);
            }
        });

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        arbolCliente.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(arbolCliente);

        lblServidor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblServidor.setForeground(new java.awt.Color(255, 51, 51));
        lblServidor.setText("Servidor:");

        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(51, 255, 51));
        jTextField1.setEnabled(false);

        lblPuerto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPuerto.setForeground(new java.awt.Color(255, 51, 51));
        lblPuerto.setText("Puerto:");

        jTextField2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(51, 255, 51));
        jTextField2.setEnabled(false);

        botonListServidor.setText("Listar servidor");
        botonListServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListServidorActionPerformed(evt);
            }
        });

        botonListCliente.setText("Listar cliente");
        botonListCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(botonDescargar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonSubir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblPuerto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonListServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botonListCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblServidor)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPuerto)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonListServidor)
                            .addComponent(botonListCliente))
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonDescargar)
                                .addGap(31, 31, 31)
                                .addComponent(botonSubir)
                                .addGap(146, 146, 146)
                                .addComponent(lblConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Boton para descargar un archivo del servidor al cliente
     *
     * @param evt
     */
    private void botonDescargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDescargarActionPerformed
        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    String ruta = "";
                    boolean rutaCorrecta = false;

                    Object[] auxruta = arbolServidor.getSelectionPath().getPath();

                    for (int i = 0; i < auxruta.length; i++) {
                        if (i == 0) {
                            ruta = ruta.concat(repositorioServidor);
                        } else if (i != auxruta.length - 1) {
                            ruta = ruta.concat(String.valueOf(auxruta[i]) + "\\");
                        } else {
                            ruta = ruta.concat(String.valueOf(auxruta[i]));
                        }
                    }
                    if (ruta.substring(ruta.length() - 4).contains(".txt")) {
                        rutaCorrecta = true;
                    }

                    if (rutaCorrecta) {
                        descargarArchivo(ruta);

                    } else {
                        JOptionPane.showMessageDialog(null, "Selecciona un archivo, no un directorio", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } catch (IOException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error de conexión con el servidor", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (NullPointerException npe) {
                    JOptionPane.showMessageDialog(null, "Selecciona que quieres descargar", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        thread1.start();


    }//GEN-LAST:event_botonDescargarActionPerformed

    /**
     * Boton para subir archivos del cliente al servidor
     *
     * @param evt
     */
    public void descargarArchivo(String ruta) throws FileNotFoundException, IOException {
        output.writeObject(2);
        int bytesLeidos;
        DataInputStream clienteData = new DataInputStream(cliente.getInputStream());
        PrintStream os = new PrintStream(cliente.getOutputStream());
        os.println(ruta);
        os.flush();
        File archivo = new File(ruta);
        OutputStream output = new FileOutputStream(repositorioCliente + archivo.getName());

        int dimension = clienteData.readInt();
        byte[] buffer = new byte[256];
        while (dimension > 0 && (bytesLeidos = clienteData.read(buffer, 0, (int) Math.min(buffer.length, dimension))) != -1) {
            output.write(clavePublicaServidor.desencriptar(buffer));
            dimension -= bytesLeidos;
        }
        output.close();
        listarCliente();
    }

    private void botonSubirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSubirActionPerformed
        try {
            boolean rutaCorrecta = false;
            Object[] pathOrigen = arbolCliente.getSelectionPath().getPath();
            String rutaOrigen = "";
            for (int i = 0; i < pathOrigen.length; i++) {
                if (i == 0) {
                    rutaOrigen = rutaOrigen.concat("Repositorio\\Cliente\\");
                } else if (i != pathOrigen.length - 1) {
                    rutaOrigen = rutaOrigen.concat(String.valueOf(pathOrigen[i]) + "\\");
                } else {
                    rutaOrigen = rutaOrigen.concat(String.valueOf(pathOrigen[i]));
                }
            }
            if (rutaOrigen.substring(rutaOrigen.length() - 4).contains(".txt")) {
                rutaCorrecta = true;
            }
            if (rutaCorrecta) {
                try {
                    output.writeObject(3);
                    PrintStream os = new PrintStream(cliente.getOutputStream());
                    os.println(rutaOrigen);
                    os.flush();
                    subirArchivo(rutaOrigen);
                } catch (IOException ex) {
                    Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecciona un archivo, no un directorio", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(this, "Selecciona que quieres subir", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonSubirActionPerformed

    /**
     * Boton para sacar la lista del servidor
     *
     * @param evt
     */
    private void botonListServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListServidorActionPerformed
        listarServidor();
    }//GEN-LAST:event_botonListServidorActionPerformed

    /**
     * Boton para sacar la lista del cliente
     *
     * @param evt
     */
    private void botonListClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListClienteActionPerformed
        listarCliente();
    }//GEN-LAST:event_botonListClienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Cliente c = new Cliente();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbolCliente;
    private javax.swing.JTree arbolServidor;
    private javax.swing.JButton botonDescargar;
    private javax.swing.JButton botonListCliente;
    private javax.swing.JButton botonListServidor;
    private javax.swing.JButton botonSubir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblConexion;
    private javax.swing.JLabel lblPuerto;
    private javax.swing.JLabel lblServidor;
    // End of variables declaration//GEN-END:variables
     /**
     * Metodo para listar los archivos del cliente
     */
    public void listarCliente() {
        File[] archivos;

        File carpetaCliente = new File(repositorioCliente);
        archivos = carpetaCliente.listFiles();

        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Cliente");
        DefaultTreeModel modelo = new DefaultTreeModel(nodo);
        crearArbol(modelo, nodo, archivos);
        arbolCliente.setModel(modelo);

    }

    /**
     * Método para listar los archivos del servidor
     */
    public void listarServidor() {
        File[] archivos;
        try {
            output.writeObject(1);
            archivos = (File[]) input.readObject();
            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Servidor");
            DefaultTreeModel modelo = new DefaultTreeModel(nodo);
            crearArbol(modelo, nodo, archivos);
            arbolServidor.setModel(modelo);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error de conexión con el servidor", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Metodo que crea el arbol de directorios
     *
     * @param modelo modelo del arbol
     * @param padre nodo padre
     * @param archivos lista de archivos a montar.
     */
    public void crearArbol(DefaultTreeModel modelo, DefaultMutableTreeNode padre, File[] archivos) {
        DefaultMutableTreeNode aux = null;
        if (archivos != null) {
            for (int i = 0; i < archivos.length; i++) {
                aux = new DefaultMutableTreeNode(archivos[i].getName());
                modelo.insertNodeInto(aux, padre, i);

                if (archivos[i].isDirectory()) {
                    File[] auxarchivos = archivos[i].listFiles();
                    crearArbol(modelo, aux, auxarchivos);
                }
            }
        }
    }

    /**
     * Metodo que sube un archivo al servidor
     *
     * @param ruta ruta donde se quiere subir
     */
    public void subirArchivo(String ruta) {
        try {
            File archivo = new File(ruta);
            byte[] archivoEncriptado = Files.readAllBytes(archivo.toPath());

            int tamaño = 256;
            List<byte[]> desencriptado = Dividir.dividirArray((archivoEncriptado), tamaño);
            List<byte[]> encriptado = new ArrayList<>();

            int longitud = 0;
            for (byte[] b : desencriptado) {
                byte[] encriptacion = clavePrivada.encriptar(b);
                encriptado.add(encriptacion);
                longitud += encriptacion.length;
            }
            DataOutputStream dos = new DataOutputStream(cliente.getOutputStream());
            dos.writeInt(longitud);
            for (byte[] b : encriptado) {
                dos.write(b, 0, b.length);
            }
            dos.flush();
            listarServidor();
            
        } catch (Exception e) {
            System.err.println("El archivo no existe.");
        }
    }
}
